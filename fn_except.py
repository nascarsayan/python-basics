# functions

# A function is a piece of code that can be reused. It can be called from anywhere in the program.
# (input1, input2...) -> function -> (output)
# number of inputs can be 0 or more
# number of outputs can be 0 or 1

# return statement is optional

def add(input1: int, input2: int) -> int:
# def add(input1, input2):
    # code
    output = input1 + input2
    return output

x = add(1, 2) # 3
print(x)

# function with no input
def hello():
    print("hello")

hello()


# function with no output
def say_hello(name: str):
    print("Hello " + name)


# it helps us reduce repetition
# example : print all tables from 2 to 5
# 2 * 1 = 2
# 2 * 2 = 4
# ...
# 5 * 10 = 50


def print_table(number: int):
    for i in range(1, 11):
        print(number, " * ", i, " = ", number * i)


# for i in range(2, 6):
#     print_table(i)


# 0, 1, 2, 3, 4, 5, 6,  7,  8,  9
# 0, 1, 1, 2, 3, 5, 8, 13, 21, 34
def fibonacci(n: int) -> int:
    if n < 0:
        return -1
    if n == 0 or n == 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)


def fibonacci_iterative(n: int) -> int:
    if n < 0:
        return -1
    if n == 0 or n == 1:
        return n
    fib1 = 0
    fib2 = 1
    fib = 0
    for i in range(2, n + 1):
        fib = fib1 + fib2
        fib1 = fib2
        fib2 = fib
    return fib


# fib = fibonacci(35)
# print(fib)

# fib = fibonacci_iterative(35)
# print(fib)

# fib(4) =      fib(3)           +     fib(2)
#    = fib(2) + fib(1)       + fib(1) + fib(0)
#    = (fib(1) + fib(0)) + 1   + 1       + 0

### Exception Handling

# We use try-except-finally to handle exceptions
# What are exceptions?
# Exceptions are errors that occur during the execution of the program.
# It can cause due to several reasons:
# 1. User input error
# 2. File not found
# 3. Network error: Example: You are trying to fetch the tweets from twitter, but your internet is not working.
# 4. Memory error: You are trying to load a very large file into memory, but your RAM is not sufficient.

# Types of exceptions:
# 1 . Programmer-generated exceptions: These are the exceptions that are generated by the programmer.
# Example: You are trying to divide a number by zero. This will cause an exception.

# 2. System-generated exceptions: These are the exceptions that are generated by the system.


# def exception_example():
n = int(input("Enter a number: "))

f = None
try:
    x = 10 / n
    print(f"10 / {n} = {x}")

    # r: read
    # w: write -> overwrite the contents of the file
    # a: append -> add to the end of the file
    f = open("/Users/nascarsayan/Code/local/python-basics/hello", "r")
    print(f.read())
    raise Exception("This is an exception")  # programmer-generated exception
except ZeroDivisionError as z:  # system-generated exception
    print(z)
    print("You cannot divide a number by zero")
except FileNotFoundError as f:
    print(f)
    print("File not found")
# except Exception as e:
#     print(e)
#     print("Some error occurred")
finally:
    print("This is the finally block")
    if f is not None:
        f.close()


# print("End of function")


# exception_example()

print("Finished")


def test():
    for retry_count in range(3):
        try:
            n = int(input("Enter a number: "))
            print(f"10 / {n} = {10 / n}")
        except ValueError:
            print("Please enter a valid number")
        except ZeroDivisionError:
            print("Please enter a number other than 0")
        else:
            break
    else:
        print("You have exceeded the retry limit")

test()
